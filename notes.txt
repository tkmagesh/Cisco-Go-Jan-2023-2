Magesh Kuppan

Schedule:
    Commence    : 9:00 AM
    Tea Break   : 10:45 AM (15 mins)
    Lunch Break : 12:30 PM (1 hour)
    Tea Break   : 3:15 PM (15 mins)
    Wind up     : 5:00 PM

Methodology:
    No powerpoints
    No scheduled time for Q & A


Why Go?
    * Simplicity
        ONLY 25 keywords
        - No access modifiers (No public, private, protected, internal etc)
        - No classes (only structs)
        - No inheritence (only composition)
        - No reference types (everyting is a value)
        - No exceptions (only errors)
        - No "try catch finally" construct
        - No pointer arithmetic
        - No implicity type conversions 

    * Close to hardware
        - No VM 
        - Compile to native code
        - Tooling support for cross-compilation
        - Performance is equivalent to C++

    * Concurrency
        - Ability to have more than one execution path
        - Lightweight Concurrency model using goroutines
        - 1 OS Thread (2 MB) vs 1 Goroutine (4 KB)
        - Language support for concurrency
            Go keyword, channel data type (used for communication between goroutines), channel operator (<-), range & select case constructs
        - APIs support
            "sync" package
            "sync/atomic" package

Software Requirements:
    1. Go tools (https://go.dev/dl)
        go version
    2. Visual Studio Code (https://code.visualstudio.com/download)
        Go extends for Visual Studio (https://marketplace.visualstudio.com/items?itemName=golang.Go)
    3. GIT client
    4. htop (https://htop.dev/)
    
To run a go program
    go run <file_name.go>

To create a build
    go build <file_name.go>
    go build -o <binary_name> <file_name.go>

To list all environment variables
    go env

to get the values of specific environment variables    
    go env <var-1> <var-2>

to set the values of specific environment variables
    go env -w <var-1>=<val-1> <var-2>=<val-2>

Environment variables for cross-compilation
    GOARCH
    GOOS

To get the list of supported OS/arch for cross compilation
    go tool dist list

Example of cross compilation
    GOOS=windows GOARCH=386 go build <file_name.go>

Data Types
    bool
    string

    int
    int8
    int16
    int32
    int64

    uint
    uint8
    uint16
    uint32
    uint64

    float32
    float64

    complex64 ( real [float32] + imaginary [float32] )
    complex128 ( real [float64] + imaginary [float64] )

    type aliases
    byte (alias for uint8)
    rune (alias for int32) (unicode code points)

Variables
    Function scoped
        Can use :=
        Cannot have unused variables

    Package scoped
        Cannot use :=
        Can have unused variables

Constants
    CAN have unused constants at both function scope & package scope


Constructs
    if else
    switch case
    for
    func 

Functions
    Named Results
    Variadic functions
    Anonymous functions
    Higher Order functions (functions are first class citizens)
        - Assign functions to variables
        - Pass functions as arguments to other functions
        - Return functions as return values

Error
    values that implement "error" interface
    Creation
        fmt.Errorf()
        errors.New()

Deferred Functions

Panic & Recovery
    Panic => a state in the application where the application execution cannot proceed further


Modules & Packages
    Module
        Any code that is versioned together & deployed together
    Package
        internal organization of a module

    To create a module
        module_name = "repo path of the module"
        go mod init <module_name>

    To run a module
        go run .

    To build a module
        go build .
        go build -o <binary_name> .

    To add a 3rd party package
        go get <package_name>
            ex: go get github.com/fatih/color
        downloaded at GOPATH/pkg folder

    To update the go.mod file
        go mod tidy

    To download the dependencies (based on the references in the go.mod file)
        go mod download

    To localize the dependencies
        go mod vendor

    To install go binaries (command line tools)
        go install <module_name>
            installed in the GOPATH/bin folder

            
    Other usefule mod commands
        go mod graph
        go mod why <module_name>


Collections
    Array
        Fixed size typed collection

    Slice
        Variable size typed collection

    Map
        Typed collection of key/value pairs


Concurrency
    concurrency is NOT parallelism
    concurrency design = application with more than one execution path

    Detecting data race
        go run --race 07-demo.go
        go build --race 07-demo.go

        